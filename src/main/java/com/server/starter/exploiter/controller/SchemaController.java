package com.server.starter.exploiter.controller;

import com.server.starter.exploiter.dto.FieldDTO;
import com.server.starter.exploiter.dto.SchemaDTO;
import com.server.starter.exploiter.service.FieldService;
import com.server.starter.exploiter.service.SchemaService;
import com.server.starter.exploiter.vo.FieldVO;
import com.server.starter.exploiter.vo.SchemaVO;
import com.server.starter.exploiter.vo.TemplateVO;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/schemas")
public class SchemaController {

    private final Logger logger = LoggerFactory.getLogger(SchemaController.class);

    private final SchemaService schemaService;
    private final FieldService fieldService;

    /**
     * <p>Constructor .</p>
     * <p>
     * //     * @param regionService a {@link SchemaService} object
     */
    public SchemaController(SchemaService schemaService, FieldService fieldService) {
        this.schemaService = schemaService;
        this.fieldService = fieldService;
    }

    /**
     * 分页查询
     *
     * @param page       页码
     * @param size       大小
     * @param sortBy     排序字段
     * @param descending 排序方向
     * @return 查询的数据集，异常时返回204状态码
     */
    @PreAuthorize("hasAuthority('SCOPE_schemas:read')")
    @GetMapping
    public ResponseEntity<Page<SchemaVO>> retrieve(@RequestParam int page, @RequestParam int size,
                                                   String sortBy, boolean descending, String name) {
        Page<SchemaVO> voPage;
        try {
            voPage = schemaService.retrieve(page, size, sortBy, descending, name);
        } catch (Exception e) {
            logger.error("Retrieve schema occurred an error: ", e);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(voPage);
    }

    /**
     * 根据 id 查询
     *
     * @param id 业务id
     * @return 查询的数据，异常时返回204状态码
     */
    @PreAuthorize("hasAuthority('SCOPE_schemas:read')")
    @GetMapping("/{id}")
    public ResponseEntity<SchemaVO> fetch(@PathVariable Long id) {
        SchemaVO vo;
        try {
            vo = schemaService.fetch(id);
        } catch (Exception e) {
            logger.error("Fetch schema occurred an error: ", e);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(vo);
    }

    /**
     * 是否存在
     *
     * @param name 名称
     * @return 如果查询到数据，返回查询到的信息，否则返回204状态码
     */
    @PreAuthorize("hasAuthority('SCOPE_schemas:read')")
    @GetMapping("/exist")
    public ResponseEntity<Boolean> exist(@RequestParam String name, Long id) {
        boolean exist;
        try {
            exist = schemaService.exist(name, id);
        } catch (Exception e) {
            logger.info("Query schema exist occurred an error: ", e);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(exist);
    }

    /**
     * 添加信息
     *
     * @param dto 要添加的数据
     * @return 如果添加数据成功，返回添加后的信息，否则返回417状态码
     */
    @PreAuthorize("hasAuthority('SCOPE_schemas:write')")
    @PostMapping
    public ResponseEntity<SchemaVO> create(@RequestBody @Valid SchemaDTO dto) {
        SchemaVO vo;
        try {
            vo = schemaService.create(dto);
        } catch (Exception e) {
            logger.error("Create schema occurred an error: ", e);
            return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).build();
        }
        return ResponseEntity.status(HttpStatus.CREATED).body(vo);
    }

    /**
     * 添加信息
     *
     * @param dto 要添加的数据
     * @return 如果添加数据成功，返回添加后的信息，否则返回417状态码
     */
    @PreAuthorize("hasAuthority('SCOPE_schemas:write')")
    @PutMapping("/{id}")
    public ResponseEntity<SchemaVO> modify(@PathVariable Long id, @RequestBody @Valid SchemaDTO dto) {
        SchemaVO vo;
        try {
            vo = schemaService.modify(id, dto);
        } catch (Exception e) {
            logger.error("Modify schema occurred an error: ", e);
            return ResponseEntity.status(HttpStatus.NOT_MODIFIED).build();
        }
        return ResponseEntity.accepted().body(vo);
    }

    /**
     * 删除信息
     *
     * @param id 主键
     * @return 如果删除成功，返回200状态码，否则返回417状态码
     */
    @PreAuthorize("hasAuthority('SCOPE_schemas:write')")
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> remove(@PathVariable Long id) {
        try {
            schemaService.remove(id);
        } catch (Exception e) {
            logger.error("Remove schema occurred an error: ", e);
            return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).build();
        }
        return ResponseEntity.ok().build();
    }

    /**
     * 根据 id 查询
     *
     * @param id 主键
     * @return 查询的数据，异常时返回204状态码
     */
    @GetMapping("/{id}/fields")
    public ResponseEntity<List<FieldVO>> fields(@PathVariable Long id) {
        List<FieldVO> voList;
        try {
            voList = fieldService.findAllBySchemaId(id);
        } catch (Exception e) {
            logger.error("Fetch schema field occurred an error: ", e);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(voList);
    }

    /**
     * 添加
     *
     * @param id      主键
     * @param dtoList list
     * @return 查询的数据，异常时返回204状态码
     */
    @PatchMapping("/{id}/fields")
    public ResponseEntity<List<FieldVO>> modifyFields(@PathVariable Long id, @RequestBody List<FieldDTO> dtoList) {
        List<FieldVO> voList;
        try {
            // enable
            schemaService.toggleStatus(id);
            voList = fieldService.modifyAll(id, dtoList);
        } catch (Exception e) {
            logger.error("Fetch schema field occurred an error: ", e);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(voList);
    }

    /**
     * sync
     *
     * @param id 要主键
     * @return 如果成功，返回200，否则返回417状态码
     */
    @PreAuthorize("hasAuthority('SCOPE_schemas:write')")
    @PatchMapping("/{id}/sync")
    public ResponseEntity<Void> sync(@PathVariable Long id) {
        try {
            schemaService.sync(id);
        } catch (Exception e) {
            logger.error("Sync occurred an error: ", e);
            return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).build();
        }
        return ResponseEntity.ok().build();
    }

    /**
     * generate
     *
     * @param id 要主键
     * @return 如果成功，返回200，否则返回417状态码
     */
    @PreAuthorize("hasAuthority('SCOPE_schemas:write')")
    @PostMapping("/{id}/generate")
    public ResponseEntity<Void> generate(@PathVariable Long id) {
        try {
            schemaService.generate(id);
        } catch (Exception e) {
            logger.error("Generate occurred an error: ", e);
            return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).build();
        }
        return ResponseEntity.ok().build();
    }

    /**
     * generate
     *
     * @param id 要主键
     * @return 如果成功，返回200，否则返回417状态码
     */
    @PreAuthorize("hasAuthority('SCOPE_schemas:read')")
    @GetMapping("/{id}/preview")
    public ResponseEntity<List<TemplateVO>> preview(@PathVariable Long id) {
        List<TemplateVO> voList;
        try {
            voList = schemaService.preview(id);
        } catch (Exception e) {
            logger.error("Generate codes occurred an error: ", e);
            return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).build();
        }
        return ResponseEntity.ok().body(voList);
    }

}
