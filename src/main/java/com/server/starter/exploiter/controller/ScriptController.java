package com.server.starter.exploiter.controller;

import com.server.starter.exploiter.dto.ScriptConfigDTO;
import com.server.starter.exploiter.service.ScriptConfigService;
import com.server.starter.exploiter.vo.ScriptConfigVO;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/scripts")
public class ScriptController {


    private final Logger logger = LoggerFactory.getLogger(ScriptController.class);

    private final ScriptConfigService scriptConfigService;

    /**
     * <p>Constructor .</p>
     * <p>
     * //     * @param regionService a {@link com.server.starter.exploiter.service.ScriptConfigService} object
     */
    public ScriptController(ScriptConfigService scriptConfigService) {
        this.scriptConfigService = scriptConfigService;
    }

    /**
     * 查询
     *
     * @param name 名称
     * @return 查询的数据集，异常时返回204状态码
     */
    @PreAuthorize("hasAuthority('SCOPE_scripts:read')")
    @GetMapping
    public ResponseEntity<List<ScriptConfigVO>> retrieve(String name) {
        List<ScriptConfigVO> voList;
        try {
            voList = scriptConfigService.retrieve(name);
        } catch (Exception e) {
            logger.error("Retrieve region occurred an error: ", e);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(voList);
    }

    /**
     * 根据 id 查询
     *
     * @param id 业务id
     * @return 查询的数据，异常时返回204状态码
     */
    @PreAuthorize("hasAuthority('SCOPE_scripts:read')")
    @GetMapping("/{id}")
    public ResponseEntity<ScriptConfigVO> fetch(@PathVariable Long id) {
        ScriptConfigVO vo;
        try {
            vo = scriptConfigService.fetch(id);
        } catch (Exception e) {
            logger.error("Fetch region occurred an error: ", e);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(vo);
    }

    /**
     * 是否存在
     *
     * @param name 名称
     * @return 如果查询到数据，返回查询到的信息，否则返回204状态码
     */
    @PreAuthorize("hasAuthority('SCOPE_scripts:read')")
    @GetMapping("/{name}/exist")
    public ResponseEntity<Boolean> exist(@PathVariable String name) {
        boolean exist;
        try {
            exist = scriptConfigService.exist(name);
        } catch (Exception e) {
            logger.info("Query region exist occurred an error: ", e);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(exist);
    }

    /**
     * 添加信息
     *
     * @param dto 要添加的数据
     * @return 如果添加数据成功，返回添加后的信息，否则返回417状态码
     */
    @PreAuthorize("hasAuthority('SCOPE_scripts:write')")
    @PostMapping
    public ResponseEntity<ScriptConfigVO> create(@RequestBody @Valid ScriptConfigDTO dto) {
        ScriptConfigVO vo;
        try {
            vo = scriptConfigService.create(dto);
        } catch (Exception e) {
            logger.error("Create region occurred an error: ", e);
            return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
        }
        return ResponseEntity.status(HttpStatus.CREATED).body(vo);
    }

    /**
     * 删除信息
     *
     * @param id 主键
     * @return 如果删除成功，返回200状态码，否则返回417状态码
     */
    @PreAuthorize("hasAuthority('SCOPE_scripts:write')")
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> remove(@PathVariable Long id) {
        try {
            scriptConfigService.remove(id);
        } catch (Exception e) {
            logger.error("Remove region occurred an error: ", e);
            return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).build();
        }
        return ResponseEntity.ok().build();
    }
}
