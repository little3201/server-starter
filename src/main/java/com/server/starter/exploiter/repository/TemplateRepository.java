package com.server.starter.exploiter.repository;

import com.server.starter.exploiter.domain.Template;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jdbc.repository.query.Modifying;
import org.springframework.data.jdbc.repository.query.Query;
import org.springframework.data.repository.ListCrudRepository;
import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.stereotype.Repository;

/**
 * Repository interface for template operations.
 * Extends ListCrudRepository and PagingAndSortingRepository.
 *
 * @author wq li
 **/
@Repository
public interface TemplateRepository extends ListCrudRepository<Template, Long>,
        PagingAndSortingRepository<Template, Long> {

    /**
     * Finds all records with name containing the specified string.
     *
     * @param name     The name filter for the templates.
     * @param pageable The pagination information.
     * @return A paginated list of templates.
     */
    Page<Template> findAllByNameContaining(String name, Pageable pageable);

    /**
     * Checks if a record exists by name.
     *
     * @param name The name of the record.
     * @return true if the record exists, false otherwise.
     */
    boolean existsByName(String name);

    /**
     * Checks if a record exists by name, excluding a specific ID.
     *
     * @param name The name of the record.
     * @param id   The ID to exclude from the check.
     * @return true if the record exists, false otherwise.
     */
    boolean existsByNameAndIdNot(String name, Long id);

    /**
     * Toggles the enabled status of a schema by its ID.
     *
     * @param id The ID of the schema.
     * @return true if the update was successful, false otherwise.
     */
    @Modifying
    @Query("UPDATE templates SET enabled = NOT enabled WHERE id = :id")
    boolean updateEnabledById(Long id);
}

