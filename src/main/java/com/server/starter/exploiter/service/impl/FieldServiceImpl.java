package com.server.starter.exploiter.service.impl;

import com.server.starter.convert.Converter;
import com.server.starter.exploiter.domain.Field;
import com.server.starter.exploiter.dto.FieldDTO;
import com.server.starter.exploiter.repository.FieldRepository;
import com.server.starter.exploiter.service.FieldService;
import com.server.starter.exploiter.vo.FieldVO;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Service
public class FieldServiceImpl implements FieldService {

    private final FieldRepository fieldRepository;

    public FieldServiceImpl(FieldRepository fieldRepository) {
        this.fieldRepository = fieldRepository;
    }

    @Override
    public List<FieldVO> findAllBySchemaId(Long schemaId) {
        return fieldRepository.findAllBySchemaId(schemaId).stream().map(this::convert).toList();
    }

    @Override
    public List<FieldVO> modifyAll(Long schemaId, List<FieldDTO> dtoList) {
        Map<String, Field> fieldMap = fieldRepository.findAllBySchemaId(schemaId).stream()
                .collect(Collectors.toMap(Field::getColumnName, field -> field));

        List<Field> fields = new ArrayList<>(dtoList.size());
        dtoList.stream().filter(fieldDTO -> Objects.equals(schemaId, fieldDTO.getSchemaId()))
                .forEach(dto -> {
                    if (fieldMap.containsKey(dto.getColumnName())) {
                        Field existingField = fieldMap.get(dto.getColumnName());
                        Converter.convert(dto, existingField);
                        fields.add(existingField);
                    }
                });
        Iterable<Field> savedFields = fieldRepository.saveAll(fields);
        return StreamSupport.stream(savedFields.spliterator(), false)
                .map(field -> Converter.convert(field, FieldVO.class)).toList();
    }

    /**
     * 类型转换
     *
     * @param field 信息
     * @return FieldVO 输出对象
     */
    private FieldVO convert(Field field) {
        return Converter.convert(field, FieldVO.class);
    }
}
