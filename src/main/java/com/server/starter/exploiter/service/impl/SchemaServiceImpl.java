package com.server.starter.exploiter.service.impl;

import com.server.starter.convert.Converter;
import com.server.starter.exploiter.domain.Field;
import com.server.starter.exploiter.domain.Schema;
import com.server.starter.exploiter.domain.Template;
import com.server.starter.exploiter.dto.SchemaDTO;
import com.server.starter.exploiter.mapper.ColumnMapper;
import com.server.starter.exploiter.repository.FieldRepository;
import com.server.starter.exploiter.repository.SchemaRepository;
import com.server.starter.exploiter.repository.TemplateRepository;
import com.server.starter.exploiter.service.SchemaService;
import com.server.starter.exploiter.vo.SchemaVO;
import freemarker.template.Configuration;
import freemarker.template.TemplateException;
import freemarker.template.TemplateExceptionHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

import java.io.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Service
public class SchemaServiceImpl implements SchemaService {

    private static final Logger logger = LoggerFactory.getLogger(SchemaServiceImpl.class);

    private static final List<String> metadata = List.of("id", "enabled", "created_by", "created_date", "last_modified_by", "last_modified_date");

    private final SchemaRepository schemaRepository;
    private final FieldRepository fieldRepository;
    private final TemplateRepository templateRepository;

    private final ColumnMapper columnMapper;

    public SchemaServiceImpl(SchemaRepository schemaRepository, FieldRepository fieldRepository, TemplateRepository templateRepository, ColumnMapper columnMapper) {
        this.schemaRepository = schemaRepository;
        this.fieldRepository = fieldRepository;
        this.templateRepository = templateRepository;
        this.columnMapper = columnMapper;
    }

    @Override
    public Page<SchemaVO> retrieve(int page, int size, String sortBy, boolean descending, String name) {
        Sort sort = Sort.by(descending ? Sort.Direction.DESC : Sort.Direction.ASC,
                StringUtils.hasText(sortBy) ? sortBy : "id");
        Pageable pageable = PageRequest.of(page, size, sort);

        return schemaRepository.findAll(pageable).map(this::convert);
    }

    @Override
    public SchemaVO fetch(Long id) {
        Assert.notNull(id, "id must not be null.");

        return schemaRepository.findById(id).map(this::convert).orElse(null);
    }

    @Override
    public boolean exist(String name) {
        Assert.hasText(name, "name must not be null.");

        return schemaRepository.existsByName(name);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public SchemaVO create(SchemaDTO dto) {
        Schema schema = Converter.convert(dto, Schema.class);
        schemaRepository.save(schema);
        List<Field> fields = columnMapper.findAllColumnsByName(dto.getName())
                .stream().filter(columnInfo -> !metadata.contains(columnInfo.getColumnName()))
                .map(columnInfo -> {
                    Field field = new Field();
                    field.setSchemaId(schema.getId());
                    field.setName(columnInfo.getColumnName());
                    field.setDataType(columnInfo.getUdtName());
                    field.setLength(columnInfo.getCharacterMaximumLength());
                    field.setNullable("YES".equals(columnInfo.getNullable()));
                    field.setComment(columnInfo.getColumnComment());
                    return field;
                }).toList();

        fieldRepository.saveAll(fields);

        return this.convert(schema);
    }

    @Override
    public SchemaVO modify(Long id, SchemaDTO dto) {
        Assert.notNull(id, "id must not be null.");

        return schemaRepository.findById(id)
                .map(existing -> {
                    Schema schema = Converter.convert(dto, existing);
                    schema = schemaRepository.save(schema);
                    return this.convert(schema);
                })
                .orElse(null);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public void remove(Long id) {
        Assert.notNull(id, "id must not be null.");

        List<Long> ids = fieldRepository.findAllBySchemaId(id).stream().map(Field::getId).toList();
        fieldRepository.deleteAllById(ids);

        schemaRepository.deleteById(id);
    }

    @Override
    public void generate(Long id) throws IOException, TemplateException {
        Schema schema = schemaRepository.findById(id).orElse(null);
        if (schema == null) {
            return;
        }
        // 准备数据模型
        Map<String, Object> dataModel = createDataModel(schema);

        // 动态加载模板并生成文件
        renderTemplate("JavaController", dataModel, schema.getReference() + schema.getName() + "Controller.java");
        renderTemplate("VuePage", dataModel, schema.getReference() + schema.getName() + ".vue");
        renderTemplate("TsInterface", dataModel, schema.getReference() + schema.getName() + ".ts");
    }

    // 创建数据模型
    private Map<String, Object> createDataModel(Schema schema) {
        Map<String, Object> dataModel = new HashMap<>();
        dataModel.put("name", schema.getName());
        dataModel.put("package", schema.getReference());
        List<Field> fields = fieldRepository.findAllBySchemaId(schema.getId());
        dataModel.put("fields", fields);
        return dataModel;
    }

    // 渲染模板并将结果写入文件
    private void renderTemplate(String type, Map<String, Object> dataModel, String outputPath)
            throws IOException, TemplateException {
        // 从数据库加载模板内容
        String content = loadContent(type);

        // 创建输出目录（若不存在）
        File outputFile = new File(outputPath);
        boolean mkdir = outputFile.getParentFile().mkdirs();
        if (!mkdir) {
            logger.warn("File path: {} create failure.", outputPath);
        }

        try (Writer fileWriter = new FileWriter(outputFile)) {
            Configuration cfg = new Configuration(Configuration.VERSION_2_3_33);
            cfg.setDefaultEncoding("UTF-8");
            cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
            // 将模板内容加载到 FreeMarker 并渲染
            freemarker.template.Template template = new freemarker.template.Template(type, new StringReader(content), cfg);
            template.process(dataModel, fileWriter);
        }
    }

    // 从数据库加载模板内容
    private String loadContent(String type) {
        Optional<Template> templateOpt = templateRepository.findByType(type);
        return templateOpt.map(Template::getContent)
                .orElseThrow(() -> new RuntimeException("Template not found for type: " + type));
    }

    /**
     * 类型转换
     *
     * @param schema 信息
     * @return 输出对象
     */
    private SchemaVO convert(Schema schema) {
        return Converter.convert(schema, SchemaVO.class);
    }
}
