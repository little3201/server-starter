package com.server.starter.exploiter.service.impl;

import com.server.starter.convert.Converter;
import com.server.starter.exploiter.constants.FieldConstant;
import com.server.starter.exploiter.constants.FieldTypeEnum;
import com.server.starter.exploiter.domain.ColumnInfo;
import com.server.starter.exploiter.domain.Field;
import com.server.starter.exploiter.domain.Schema;
import com.server.starter.exploiter.domain.Template;
import com.server.starter.exploiter.dto.SchemaDTO;
import com.server.starter.exploiter.mapper.ColumnMapper;
import com.server.starter.exploiter.repository.FieldRepository;
import com.server.starter.exploiter.repository.SchemaRepository;
import com.server.starter.exploiter.repository.TemplateRepository;
import com.server.starter.exploiter.service.SchemaService;
import com.server.starter.exploiter.vo.SchemaVO;
import com.server.starter.exploiter.vo.TemplateVO;
import freemarker.template.Configuration;
import freemarker.template.TemplateException;
import freemarker.template.TemplateExceptionHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

import java.io.*;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class SchemaServiceImpl implements SchemaService {

    private static final Logger logger = LoggerFactory.getLogger(SchemaServiceImpl.class);

    private final Configuration cfg = new Configuration(Configuration.VERSION_2_3_33);

    private final SchemaRepository schemaRepository;
    private final FieldRepository fieldRepository;
    private final TemplateRepository templateRepository;

    private final ColumnMapper columnMapper;

    public SchemaServiceImpl(SchemaRepository schemaRepository, FieldRepository fieldRepository,
                             TemplateRepository templateRepository, ColumnMapper columnMapper) {
        this.schemaRepository = schemaRepository;
        this.fieldRepository = fieldRepository;
        this.templateRepository = templateRepository;
        this.columnMapper = columnMapper;

        cfg.setDefaultEncoding("UTF-8");
        cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
    }

    @Override
    public Page<SchemaVO> retrieve(int page, int size, String sortBy, boolean descending, String name) {
        Sort sort = Sort.by(descending ? Sort.Direction.DESC : Sort.Direction.ASC,
                StringUtils.hasText(sortBy) ? sortBy : "id");
        Pageable pageable = PageRequest.of(page, size, sort);

        return schemaRepository.findAll(pageable).map(this::convert);
    }

    @Override
    public SchemaVO fetch(Long id) {
        Assert.notNull(id, "id must not be null.");

        return schemaRepository.findById(id).map(this::convert).orElse(null);
    }

    @Override
    public boolean exist(String name, Long id) {
        Assert.hasText(name, "name must not be null.");

        return schemaRepository.existsByNameAndIdNot(name, id);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public SchemaVO create(SchemaDTO dto) {
        Schema schema = Converter.convert(dto, Schema.class);
        schema.setEnabled(false);
        schemaRepository.save(schema);
        List<Field> fields = columnMapper.findAllColumnsByName(dto.getName())
                .stream().filter(columnInfo -> !FieldConstant.metadata.contains(columnInfo.getColumnName()))
                .map(columnInfo -> {
                    Field field = new Field();
                    field.setSchemaId(schema.getId());
                    constructField(field, columnInfo);
                    return field;
                }).toList();

        fieldRepository.saveAll(fields);

        return this.convert(schema);
    }

    @Override
    public SchemaVO modify(Long id, SchemaDTO dto) {
        Assert.notNull(id, "id must not be null.");

        return schemaRepository.findById(id)
                .map(existing -> {
                    Schema schema = Converter.convert(dto, existing);
                    schema = schemaRepository.save(schema);
                    return this.convert(schema);
                })
                .orElse(null);
    }

    @Override
    public void sync(Long id) {
        schemaRepository.findById(id).ifPresent(schema -> {
            Map<String, Field> fieldMap = fieldRepository.findAllBySchemaId(id).stream()
                    .collect(Collectors.toMap(Field::getColumnName, field -> field));

            List<Field> fields = columnMapper.findAllColumnsByName(schema.getName())
                    .stream().filter(columnInfo -> !FieldConstant.metadata.contains(columnInfo.getColumnName()))
                    .map(columnInfo -> {
                        Field field = new Field();
                        if (fieldMap.containsKey(columnInfo.getColumnName())) {
                            field = fieldMap.get(columnInfo.getColumnName());
                        }
                        field.setSchemaId(id);
                        constructField(field, columnInfo);
                        return field;
                    }).toList();

            fieldRepository.saveAll(fields);
        });
    }

    public void constructField(Field field, ColumnInfo columnInfo) {
        field.setColumnName(columnInfo.getColumnName());
        field.setName(snakeToCamel(columnInfo.getColumnName()));
        field.setDataType(columnInfo.getDataType());
        field.setLength(columnInfo.getCharacterMaximumLength());
        FieldTypeEnum fieldTypeEnum = FieldTypeEnum.getByDataType(columnInfo.getDataType());
        if (fieldTypeEnum != null) {
            field.setFieldType(fieldTypeEnum.getJavaType());
            field.setFormType(fieldTypeEnum.getComponent());
            field.setTsType(fieldTypeEnum.getTsType());
        }
        field.setNullable("YES".equals(columnInfo.getNullable()));
        field.setComment(columnInfo.getColumnComment());
    }

    @Override
    public boolean toggleStatus(Long id) {
        Assert.notNull(id, "id must not be null.");

        Schema schema = schemaRepository.findById(id).orElseThrow();
        if (schema.isEnabled()) {
            return schema.isEnabled();
        }
        return schemaRepository.updateEnabledById(id);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public void remove(Long id) {
        Assert.notNull(id, "id must not be null.");

        List<Long> ids = fieldRepository.findAllBySchemaId(id).stream().map(Field::getId).toList();
        fieldRepository.deleteAllById(ids);

        schemaRepository.deleteById(id);
    }

    @Override
    public void generate(Long id) throws IOException, TemplateException {
        Schema schema = schemaRepository.findById(id).orElseThrow();
        // 准备数据模型
        Map<String, Object> dataModel = createDataModel(schema);

        for (Long templateId : schema.getTemplates()) {
            writeTemplate(templateId, dataModel, schema);
        }
    }

    @Override
    public List<TemplateVO> preview(Long id) throws IOException, TemplateException {
        Schema schema = schemaRepository.findById(id).orElseThrow();
        // 准备数据模型
        Map<String, Object> dataModel = createDataModel(schema);

        Set<Long> templates = schema.getTemplates();
        List<TemplateVO> voList = new ArrayList<>(templates.size());
        for (Long templateId : templates) {
            // 从数据库加载模板内容
            Template template = templateRepository.findById(templateId).orElseThrow();

            String rendered = renderTemplate(template.getName(), template.getContent(), dataModel);
            TemplateVO vo = Converter.convert(template, TemplateVO.class);
            vo.setName(formatName(schema, template));
            vo.setContent(rendered);
            voList.add(vo);
        }
        return voList;
    }

    // 创建数据模型
    private Map<String, Object> createDataModel(Schema schema) {
        Map<String, Object> dataModel = new HashMap<>();
        dataModel.put("name", schema.getName());
        dataModel.put("domain", schema.getDomain());
        dataModel.put("reference", schema.getReference());
        List<Field> fields = fieldRepository.findAllBySchemaId(schema.getId());
        dataModel.put("fields", fields);
        return dataModel;
    }

    // 渲染模板并将结果写入文件
    private void writeTemplate(Long templateId, Map<String, Object> dataModel, Schema schema)
            throws IOException, TemplateException {
        // 从数据库加载模板内容
        Template template = templateRepository.findById(templateId).orElseThrow();

        // format the reference
        String reference = String.format(schema.getReference() + "/" + schema.getName() +
                "/%s" + template.getSuffix(), formatName(schema, template));
        // 创建输出目录（若不存在）
        File outputFile = new File(reference);
        boolean mkdir = outputFile.getParentFile().mkdirs();
        if (!mkdir) {
            logger.warn("File path: {} create failure.", reference);
        }

        try (Writer fileWriter = new FileWriter(outputFile)) {
            // 将模板内容加载到 FreeMarker 并渲染
            freemarker.template.Template freemarker = new freemarker.template.Template(template.getName(),
                    new StringReader(template.getContent()), cfg);
            freemarker.process(dataModel, fileWriter);
        }
    }

    private String formatName(Schema schema, Template template) {
        if (".vue".equals(template.getSuffix())) {
            return template.getName();
        } else if (".ts".equals(template.getSuffix())) {
            if (schema.getName().contains("_")) {
                return String.format(template.getName(), schema.getName().replace("_", "-"));
            }
            return String.format(template.getName(), schema.getName());
        }
        return String.format(template.getName(), schema.getDomain());
    }

    // 渲染模板并将结果写入文件
    private String renderTemplate(String name, String content, Map<String, Object> dataModel) throws IOException, TemplateException {
        // 将模板内容加载到 FreeMarker 并渲染
        try (StringWriter stringWriter = new StringWriter()) {
            freemarker.template.Template freemarker = new freemarker.template.Template(name,
                    new StringReader(content), cfg);
            freemarker.process(dataModel, stringWriter);
            return stringWriter.toString();
        }
    }

    private String snakeToCamel(String columnName) {
        if (StringUtils.hasText(columnName)) {
            if (columnName.contains("_")) {
                String[] columns = columnName.split("_");
                StringBuilder fieldName = new StringBuilder(columns[0]);
                for (int i = 1; i < columns.length; i++) {
                    fieldName.append(columns[i].substring(0, 1).toUpperCase()).append(columns[i].substring(1));
                }
                return fieldName.toString();
            }
        }
        return columnName;
    }

    /**
     * 类型转换
     *
     * @param schema 信息
     * @return 输出对象
     */
    private SchemaVO convert(Schema schema) {
        return Converter.convert(schema, SchemaVO.class);
    }
}
